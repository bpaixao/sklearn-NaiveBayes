# -*- coding: utf-8 -*-
"""Trabalho de tópicos especiais.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1o5uCmSoRlbjzOvluvPMzwPnQHQ6Je89w

## **Classificação com sklearn - Modelo supervisionado Naive Bayes (NB)**
"""

# Importando biblioteca sklearn que é uma biblioteca Python para trabalhar com Machine Learning
import sklearn

# Importando o dataset sobre tumores de cancêr de mama disponibilizado no site do sklearn.org
from sklearn.datasets import load_breast_cancer

# Carregar o dataset em uma variável
data = load_breast_cancer()

# Criando variáveis com cada conjuntos de informações importantes para o treinamento do algoritmo
label_names = data['target_names'] 
labels = data['target'] 
feature_names = data['feature_names']
features = data['data']

# Printando as informações do dataset

print(label_names) #Label se o tumor é maligno ou benigno
print(labels[0]) #Binário para informar o tipo de tumor, sendo 0 um tumor maligno e 1 um tumor benigno.
print(feature_names[0]) #Características importantes para classificar um tumor em uma label.
print(features[0]) #Os valores das características

#Importando a função "train_test_split" que divide os dados em duas partes: um conjunto de treinamento e um conjunto de testes.
#Ao treinar você ensina o algoritmo a identificar as classes, por exemplo Maligno ou Benigno. 
from sklearn.model_selection import train_test_split

#Aplicando a função para a divisão dos dados de treinamento e teste.
#A função divide aleatoriamente os dados usando o parâmetro test_size. No nosso caso, o conjunto de testes (test) representa 10% do dataset original. 
#Os dados restantes 90% (train) representam os dados de treinamento. 
train, test, train_labels, test_labels = train_test_split(features,
                                                          labels,
                                                          test_size=0.1,
                                                          random_state=42)

#Importando modelo do Naive Bayes (NB) para classificação binária utilizando o módulo GaussianNB 
from sklearn.naive_bayes import GaussianNB

# Inicializando o classificador NB
gnb = GaussianNB()

# Treinando o classificador
model = gnb.fit(train, train_labels)

# O algoritmo fazendo previsões no conjunto de teste após o treinamento.
preds = gnb.predict(test)
print(preds) #print com todas as previsões feitas o conjunto de testes

#Importando a função accuracy_score
from sklearn.metrics import accuracy_score

# A accuracy avalia dentre todas as classificações (MALIGNO OU BENIGNO), quantas o modelo classificou corretamente. 
# RESULTADO GERAL: 98%
print(accuracy_score(test_labels, preds))

#Importando a função da matriz de confusão que relata o número de falsos positivos , falsos negativos , verdadeiros positivos e verdadeiros negativos.
from sklearn.metrics import confusion_matrix

#O classificador informou que 16 casos eram Maligno e acertou os 16.
#O classificador também informou que 41 casos eram Benigno entretanto só acertou 40 deles.
print(confusion_matrix(gnb.predict(test),test_labels))

#Importando um report das métricas de desempenho do algoritmo.
from sklearn.metrics import classification_report

#A precisão tem como objetivo avaliar se os tumores classificadas como Maligno eram, de fato, maligno. Ou se os classificados como benigno  eram, de fato, benigno.
print(classification_report(gnb.predict(test), test_labels, target_names=['malignant', 'benign']))